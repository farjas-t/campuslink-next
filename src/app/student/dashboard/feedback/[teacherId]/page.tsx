"use client";
import Cookies from "js-cookie";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useToast } from "@/components/ui/use-toast";
import { useRouter } from "next/navigation";

import React, { useEffect, useState } from "react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

const formSchema = z.object({
  studentId: z.string(),
  teacherId: z.string(),
  punctuality: z.string(),
  preparation: z.string(),
  effectiveness: z.string(),
  discipline: z.string(),
  interest: z.string(),
  explanation: z.string(),
  ictUsage: z.string(),
  examsAndProjects: z.string(),
  doubtsClarification: z.string(),
  portionCompletion: z.string(),
});

export default function CreatePaper({
  params,
}: {
  params: { teacherId: string };
}) {
  const teacherId = params.teacherId;
  const studentId = Cookies.get("studentId");
  const [teachername, setTeachername] = useState(null);
  const router = useRouter();
  const { toast } = useToast();

  const evaluationCriteria = [
    {
      name: "punctuality",
      label: "Punctuality of teacher in attending classes",
    },
    { name: "preparation", label: "Teacher's Preparation for the classes" },
    { name: "effectiveness", label: "Effectiveness of teaching" },
    { name: "discipline", label: "Maintains discipline in the class" },
    { name: "interest", label: "Interest generated by the teacher" },
    {
      name: "explanation",
      label: "Explain the concepts through examples and application",
    },
    { name: "ictUsage", label: "Effective usage of ICT in the class room" },
    {
      name: "examsAndProjects",
      label:
        "Design/Conduct of internal examination, seminars or Assignments and Projects",
    },
    {
      name: "doubtsClarification",
      label: "Teacher entertains / clarifies doubts",
    },
    { name: "portionCompletion", label: "Completion of portion in time" },
  ];

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      studentId: studentId || "", // Added default value handling
      teacherId: teacherId || "", // Added default value handling
      punctuality: "100",
      preparation: "100",
      effectiveness: "100",
      discipline: "100",
      interest: "100",
      explanation: "100",
      ictUsage: "100",
      examsAndProjects: "100",
      doubtsClarification: "100",
      portionCompletion: "100",
    },
  });

  useEffect(() => {
    const fetchTeacherDetails = async () => {
      try {
        const detailsres = await fetch(
          `http://localhost:3500/teacher/${teacherId}`,
          {
            method: "GET",
          }
        );
        if (detailsres.ok) {
          const teacherDetails = await detailsres.json();
          setTeachername(teacherDetails.name);
        } else {
          console.error("Failed to fetch teacher details");
        }
      } catch (error) {
        console.error("Error during teacher details fetch", error);
      }
    };
    fetchTeacherDetails();
  }, []);

  async function onSubmit(values: z.infer<typeof formSchema>) {
    try {
      const response = await fetch(`http://localhost:3500/teacher-eval/`, {
        method: "PUT",
        body: JSON.stringify(values),
        headers: {
          "Content-Type": "application/json",
        },
      });
      if (response.ok) {
        toast({
          description: "Evaluation submitted successfully.",
        });
        router.push("/student/dashboard/feedback/");
      } else {
        toast({
          variant: "destructive",
          description: "Failed to submit evaluation.",
        });
        console.error("Evaluation submission failed");
      }
    } catch (error) {
      toast({
        variant: "destructive",
        description: "Error during evaluation submission.",
      });
      console.error("Error during evaluation submission", error);
    }
  }

  return (
    <ScrollArea className="h-full">
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        <div className="p-4 lg:p-8 h-full flex items-start">
          <div className="mx-left flex w-full flex-col justify-start space-y-6 sm:w-[350px]">
            <div className="flex flex-col space-y-2 text-left">
              <h1 className="text-2xl font-semibold tracking-tight">
                {teachername}
              </h1>
              <p className="text-sm text-muted-foreground">
                Teacher Performance Evaluation
              </p>
            </div>
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-2 w-full"
              >
                {evaluationCriteria.map((criterion, index) => (
                  <FormField
                    control={form.control}
                    name={criterion.name as any}
                    render={({ field }) => (
                      <FormItem className="space-y-3">
                        <br />
                        <FormLabel className="text-base font-bold">
                          {index + 1}. {criterion.label}
                        </FormLabel>
                        <FormControl>
                          <RadioGroup
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                            className="flex flex-col space-y-1"
                          >
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="100" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                Excellent
                              </FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="75" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                Very Good
                              </FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="50" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                Good
                              </FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="25" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                Fair
                              </FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="0" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                Poor
                              </FormLabel>
                            </FormItem>
                          </RadioGroup>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                ))}
                <br />
                <Button type="submit" className="ml-auto">
                  Submit
                </Button>
              </form>
            </Form>
          </div>
        </div>
      </div>
    </ScrollArea>
  );
}
